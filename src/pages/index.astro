<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
        <meta name="description" content="">
		<title>SISTEMA SOLAR - THREE JS</title>
	</head>
	<body>

        <script>
			import * as THREE from 'three';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { createStars } from '../components/startField.js';
			import { createPlanet } from '../components/planets';
		
			import {
			jupiterTexture,
			marsTexture,
			mercuryTexture,
			neptuneTexture,
			plutoTexture,
			saturnRingTexture,
			saturnTexture,
			sunTexture,
			uranusRingTexture,
			uranusTexture,
			venusTexture,
			} from "../components/textures";
			import { earthTexture } from '../components/textures';
			import { createRings } from '../components/rings';
		
			const wScreen = window.innerWidth;
			const hScreen = window.innerHeight;
			const scene = new THREE.Scene();
			const camera = new THREE.PerspectiveCamera(45, wScreen / hScreen, 0.1, 1000);
			camera.position.set(250, 200, 10);
			scene.position.set(0,60,0)
		
			const renderer = new THREE.WebGLRenderer({
				antialias: true,
			});
		
			renderer.setSize(wScreen, hScreen);
			document.body.appendChild(renderer.domElement);
		
			new OrbitControls(camera, renderer.domElement);
		
			// -------
			
			const loader = new THREE.TextureLoader();
			const stars = createStars(scene);
		
			// -------
		
			const mercury = createPlanet(3, mercuryTexture, 36, null, loader, scene);
			createRings(36, scene);

			const venus = createPlanet(3.5, venusTexture, 47, null, loader, scene);
			createRings(47, scene);

			const earth = createPlanet(4, earthTexture, 59, null, loader, scene);
			createRings(59, scene);

			const mars = createPlanet(3.4, marsTexture, 71, null, loader, scene);
			createRings(71, scene);

			const jupiter = createPlanet(9.2, jupiterTexture, 88, null, loader, scene);
			createRings(88, scene);

			const saturn = createPlanet(7.5, saturnTexture, 113, {innerRadius: 8, outerRadius: 11.5, texture: saturnRingTexture}, loader, scene)
			createRings(113, scene);

			const uranus = createPlanet(7, uranusTexture, 140, {innerRadius: 7, outerRadius: 9.5, texture: uranusRingTexture}, loader, scene)
			createRings(140, scene);

			const neptune = createPlanet(6.5, neptuneTexture, 161, null, loader, scene);
			createRings(161, scene);

			const pluto = createPlanet(2, plutoTexture, 176, null, loader, scene);
			createRings(176, scene);
			
			// -------
		
			const sunGeometry = new THREE.IcosahedronGeometry(20, 15);
			const sunMaterial = new THREE.MeshBasicMaterial(
				{map: loader.load(sunTexture)}
			);
			const sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);
			scene.add(sunMesh)
		
			const pointLight = new THREE.PointLight(0xffffff, 12000, 300);
			scene.add(pointLight);

			// -------
		
			function render() {
				requestAnimationFrame(render);
		
				sunMesh.rotation.y += 0.004;
				stars.rotation.y += 0.0009;
		
				// rotacion propia
				mercury.planetMesh.rotation.y += 0.004;
				venus.planetMesh.rotation.y += 0.002;
				earth.planetMesh.rotation.y += 0.02;
				mars.planetMesh.rotation.y += 0.018;
				jupiter.planetMesh.rotation.y += 0.04;
				saturn.planetMesh.rotation.y += 0.038;
				uranus.planetMesh.rotation.y += 0.03;
				neptune.planetMesh.rotation.y += 0.032;
				pluto.planetMesh.rotation.y += 0.008;
		
				// rotacion por el sol
				mercury.planetGroup.rotation.y += 0.02;
				venus.planetGroup.rotation.y += 0.015;
				earth.planetGroup.rotation.y += 0.012;
				mars.planetGroup.rotation.y += 0.01;
				jupiter.planetGroup.rotation.y += 0.0075;
				saturn.planetGroup.rotation.y += 0.005;
				uranus.planetGroup.rotation.y += 0.0033;
				neptune.planetGroup.rotation.y += 0.0023;
				pluto.planetGroup.rotation.y += 0.0018;
		
				renderer.render(scene, camera)
			}
		
			render();

			window.addEventListener("resize", function () {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
			
		</script>
		

	</body>
</html>